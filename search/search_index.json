{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Luabox \u00b6 Luabox is a rewrite of Termion for Lua using Luv . Features \u00b6 Raw mode TrueColor ~~Panic-full error handling~~ Special key event support (modifiers, special keys) Async I/O Mouse support And more! Installation \u00b6 [ sudo ] luarocks install luabox [ sudo ] luarocks install luabitop # For Lua versions >5.3 Quick example \u00b6 This quick example shows how you can use mouse support to plot points on your terminal. local box = require ( 'luabox' ) local util = box . util local event = box . event local clear = box . clear local cursor = box . cursor local f = string.format local stdin , stdout = util . getHandles () local console = box . Console . new ( stdin , stdout ) console : setMode ( 1 ) console : intoMouseMode () console : write ( f ( '%s%s' , cursor . hide , clear . all )) console . onData = function ( data ) local first local rest = {} for char in data : gmatch ( '.' ) do if not first then first = char else table.insert ( rest , char ) end end local iter = util . StringIterator ( table.concat ( rest )) local keyData = event . parse ( first , iter ) if keyData . key == 'ctrl' and keyData . char == 'c' then console : write ( cursor . show ) console : setMode ( 0 ) console : exitMouseMode () os.exit () elseif keyData . key == 'char' and keyData . char == 'c' then console : write ( clear . all ) elseif keyData . event and keyData . event ~= 'press' then local x , y = keyData . x , keyData . y console : write ( f ( '%sX' , cursor . goTo ( x , y ))) end end console . run () For a larger example run ./make.sh minesweeper . This example is a (terrible) clone of minesweeper. You will need teal in-order to compile. TODO \u00b6 [ ] - Cleanup event.lua [ ] - Write tests","title":"Luabox"},{"location":"#luabox","text":"Luabox is a rewrite of Termion for Lua using Luv .","title":"Luabox"},{"location":"#features","text":"Raw mode TrueColor ~~Panic-full error handling~~ Special key event support (modifiers, special keys) Async I/O Mouse support And more!","title":"Features"},{"location":"#installation","text":"[ sudo ] luarocks install luabox [ sudo ] luarocks install luabitop # For Lua versions >5.3","title":"Installation"},{"location":"#quick-example","text":"This quick example shows how you can use mouse support to plot points on your terminal. local box = require ( 'luabox' ) local util = box . util local event = box . event local clear = box . clear local cursor = box . cursor local f = string.format local stdin , stdout = util . getHandles () local console = box . Console . new ( stdin , stdout ) console : setMode ( 1 ) console : intoMouseMode () console : write ( f ( '%s%s' , cursor . hide , clear . all )) console . onData = function ( data ) local first local rest = {} for char in data : gmatch ( '.' ) do if not first then first = char else table.insert ( rest , char ) end end local iter = util . StringIterator ( table.concat ( rest )) local keyData = event . parse ( first , iter ) if keyData . key == 'ctrl' and keyData . char == 'c' then console : write ( cursor . show ) console : setMode ( 0 ) console : exitMouseMode () os.exit () elseif keyData . key == 'char' and keyData . char == 'c' then console : write ( clear . all ) elseif keyData . event and keyData . event ~= 'press' then local x , y = keyData . x , keyData . y console : write ( f ( '%sX' , cursor . goTo ( x , y ))) end end console . run () For a larger example run ./make.sh minesweeper . This example is a (terrible) clone of minesweeper. You will need teal in-order to compile.","title":"Quick example"},{"location":"#todo","text":"[ ] - Cleanup event.lua [ ] - Write tests","title":"TODO"},{"location":"classes/Console/","text":"Class Console \u00b6 The Console, storing the stdin and stdout as well as some functions to control them Properties \u00b6 Property Type Description rawMode number The number to set the console to raw mode normalMode number The number to set the console to normal mode onData function ? The hook that is called when data from stdin is received Methods \u00b6 Console.isTTY(tty: tty): boolean \u00b6 Check if the handle is a TTY Console.new(stdin: tty, stdout: tty): Console \u00b6 Create a new Console Make sure to call Console.run to uv.run in order for the console to operate If you need stdin and stdout, call util.getHandles() Console . new ( util . getHandles ()) Console:setMode(mode: number ) \u00b6 Set the mode of the console Console:write(data: string ) \u00b6 Write data to the console Console:intoMouseMode() \u00b6 Set the console into mouse mode Console:exitMouseMode() \u00b6 Exit mouse mode Console:cursorPosition(noClose: boolean ): number , number \u00b6 Get the cursor position This function is asynchronous and must be called from a coroutine Console:getDimensions(): number , number \u00b6 Get the dimensions of the console Console:_lock(fn: any ) \u00b6 Internal function to lock the console Console:_on(data: any ) \u00b6 Internal function that is called when data is received","title":"Class `Console`"},{"location":"classes/Console/#class-console","text":"The Console, storing the stdin and stdout as well as some functions to control them","title":"Class Console"},{"location":"classes/Console/#properties","text":"Property Type Description rawMode number The number to set the console to raw mode normalMode number The number to set the console to normal mode onData function ? The hook that is called when data from stdin is received","title":"Properties"},{"location":"classes/Console/#methods","text":"","title":"Methods"},{"location":"classes/Console/#consoleisttytty-tty-boolean","text":"Check if the handle is a TTY","title":"Console.isTTY(tty: tty): boolean"},{"location":"classes/Console/#consolenewstdin-tty-stdout-tty-console","text":"Create a new Console Make sure to call Console.run to uv.run in order for the console to operate If you need stdin and stdout, call util.getHandles() Console . new ( util . getHandles ())","title":"Console.new(stdin: tty, stdout: tty): Console"},{"location":"classes/Console/#consolesetmodemode-number","text":"Set the mode of the console","title":"Console:setMode(mode: number)"},{"location":"classes/Console/#consolewritedata-string","text":"Write data to the console","title":"Console:write(data: string)"},{"location":"classes/Console/#consoleintomousemode","text":"Set the console into mouse mode","title":"Console:intoMouseMode()"},{"location":"classes/Console/#consoleexitmousemode","text":"Exit mouse mode","title":"Console:exitMouseMode()"},{"location":"classes/Console/#consolecursorpositionnoclose-boolean-number-number","text":"Get the cursor position This function is asynchronous and must be called from a coroutine","title":"Console:cursorPosition(noClose: boolean): number, number"},{"location":"classes/Console/#consolegetdimensions-number-number","text":"Get the dimensions of the console","title":"Console:getDimensions(): number, number"},{"location":"classes/Console/#console_lockfn-any","text":"Internal function to lock the console","title":"Console:_lock(fn: any)"},{"location":"classes/Console/#console_ondata-any","text":"Internal function that is called when data is received","title":"Console:_on(data: any)"},{"location":"classes/StringIterator/","text":"Class StringIterator \u00b6 A string iterator Methods \u00b6 StringIterator.next(self: StringIterator ): string \u00b6","title":"Class `StringIterator`"},{"location":"classes/StringIterator/#class-stringiterator","text":"A string iterator","title":"Class StringIterator"},{"location":"classes/StringIterator/#methods","text":"","title":"Methods"},{"location":"classes/StringIterator/#stringiteratornextself-stringiterator-string","text":"","title":"StringIterator.next(self: StringIterator): string"},{"location":"modules/clear/","text":"Module clear \u00b6 Strings to clear the screen Properties \u00b6 Property Type Description all string Clear the entire screen afterCursor string Clear the data after the cursor beforeCursor string Clear the data before the cursor currentLine string Clear the current line untilNewLine string Clear the screen until a new line","title":"Module `clear`"},{"location":"modules/clear/#module-clear","text":"Strings to clear the screen","title":"Module clear"},{"location":"modules/clear/#properties","text":"Property Type Description all string Clear the entire screen afterCursor string Clear the data after the cursor beforeCursor string Clear the data before the cursor currentLine string Clear the current line untilNewLine string Clear the screen until a new line","title":"Properties"},{"location":"modules/colors/","text":"Module colors \u00b6 Coloring utilities With colors, you pass them to either colors.bg or colors.fg in order to get the actual escape string console : write ( string.format ( '%sLook at my red text!' , colors . fg ( colors . red ))) Properties \u00b6 Property Type Description black number red number green number yellow number blue number magenta number cyan number white number lightBlack number lightRed number lightGreen number lightYellow number lightBlue number lightMagenta number lightCyan number lightWhite number resetFg string resetBg string Functions \u00b6 colors.bg(color: number ): string \u00b6 Get a string to change the background to the passed color colors.fg(color: number ): string \u00b6 Get a string to change the foreground to the passed color colors.truecolor(r: number , g: number , b: number ): table \u00b6 Pass to bg or fg in order to get a string","title":"Module `colors`"},{"location":"modules/colors/#module-colors","text":"Coloring utilities With colors, you pass them to either colors.bg or colors.fg in order to get the actual escape string console : write ( string.format ( '%sLook at my red text!' , colors . fg ( colors . red )))","title":"Module colors"},{"location":"modules/colors/#properties","text":"Property Type Description black number red number green number yellow number blue number magenta number cyan number white number lightBlack number lightRed number lightGreen number lightYellow number lightBlue number lightMagenta number lightCyan number lightWhite number resetFg string resetBg string","title":"Properties"},{"location":"modules/colors/#functions","text":"","title":"Functions"},{"location":"modules/colors/#colorsbgcolor-number-string","text":"Get a string to change the background to the passed color","title":"colors.bg(color: number): string"},{"location":"modules/colors/#colorsfgcolor-number-string","text":"Get a string to change the foreground to the passed color","title":"colors.fg(color: number): string"},{"location":"modules/colors/#colorstruecolorr-number-g-number-b-number-table","text":"Pass to bg or fg in order to get a string","title":"colors.truecolor(r: number, g: number, b: number): table"},{"location":"modules/cursor/","text":"Module cursor \u00b6 Cursor manipulation functions Properties \u00b6 Property Type Description hide string Hide the cursor show string Show the cursor restore string Restore the cursor save string Save the cursor blinkingBlock string Set the style to a blinking block steadyBlock string Set the style to a steady block blinkingUnderline string Set the style to a blinking underline steadyUnderline string Set the style to a steady underline blinkingBar string Set the style to a blinking bar steadyBar string Set the style to a steady bar Functions \u00b6 cursor.up(count: number ): string \u00b6 Go up a certain count cursor.down(count: number ): string \u00b6 Go down a certain count cursor.left(count: number ): string \u00b6 Go left a certain count cursor.right(count: number ): string \u00b6 Go right a certain count cursor.goTo(x: number , y: number ): string \u00b6 Go to a specific location","title":"Module `cursor`"},{"location":"modules/cursor/#module-cursor","text":"Cursor manipulation functions","title":"Module cursor"},{"location":"modules/cursor/#properties","text":"Property Type Description hide string Hide the cursor show string Show the cursor restore string Restore the cursor save string Save the cursor blinkingBlock string Set the style to a blinking block steadyBlock string Set the style to a steady block blinkingUnderline string Set the style to a blinking underline steadyUnderline string Set the style to a steady underline blinkingBar string Set the style to a blinking bar steadyBar string Set the style to a steady bar","title":"Properties"},{"location":"modules/cursor/#functions","text":"","title":"Functions"},{"location":"modules/cursor/#cursorupcount-number-string","text":"Go up a certain count","title":"cursor.up(count: number): string"},{"location":"modules/cursor/#cursordowncount-number-string","text":"Go down a certain count","title":"cursor.down(count: number): string"},{"location":"modules/cursor/#cursorleftcount-number-string","text":"Go left a certain count","title":"cursor.left(count: number): string"},{"location":"modules/cursor/#cursorrightcount-number-string","text":"Go right a certain count","title":"cursor.right(count: number): string"},{"location":"modules/cursor/#cursorgotox-number-y-number-string","text":"Go to a specific location","title":"cursor.goTo(x: number, y: number): string"},{"location":"modules/event/","text":"Module event \u00b6 Support for mouse and keyboard events. Functions \u00b6 event.parse(item: string , rest: StringIterator ): mouseEvent | keyboardEvent \u00b6 Parse an event from a single character or if needed from a StringIterator","title":"Module `event`"},{"location":"modules/event/#module-event","text":"Support for mouse and keyboard events.","title":"Module event"},{"location":"modules/event/#functions","text":"","title":"Functions"},{"location":"modules/event/#eventparseitem-string-rest-stringiterator-mouseevent-keyboardevent","text":"Parse an event from a single character or if needed from a StringIterator","title":"event.parse(item: string, rest: StringIterator): mouseEvent | keyboardEvent"},{"location":"modules/screen/","text":"Module screen \u00b6 Allows for switching between the main and alternative screen buffers This buffer only exists on xterm compatible terminals Properties \u00b6 Property Type Description toAlternative string Switch to the alternative screen toMain string Switch to the main screen","title":"Module `screen`"},{"location":"modules/screen/#module-screen","text":"Allows for switching between the main and alternative screen buffers This buffer only exists on xterm compatible terminals","title":"Module screen"},{"location":"modules/screen/#properties","text":"Property Type Description toAlternative string Switch to the alternative screen toMain string Switch to the main screen","title":"Properties"},{"location":"modules/scroll/","text":"Module scroll \u00b6 Simple scroll functionality Functions \u00b6 scroll.up(count: number ): string \u00b6 Scroll up scroll.down(count: number ): string \u00b6 Scroll down","title":"Module `scroll`"},{"location":"modules/scroll/#module-scroll","text":"Simple scroll functionality","title":"Module scroll"},{"location":"modules/scroll/#functions","text":"","title":"Functions"},{"location":"modules/scroll/#scrollupcount-number-string","text":"Scroll up","title":"scroll.up(count: number): string"},{"location":"modules/scroll/#scrolldowncount-number-string","text":"Scroll down","title":"scroll.down(count: number): string"},{"location":"modules/util/","text":"Module util \u00b6 The utilities module containing some utilities for internal use and others for external use Functions \u00b6 util.StringIterator(str: string ): StringIterator \u00b6 An iterator over strings used by event parser util.split(str: string , sep: string ): string [] \u00b6 A simple split function util.getHandles(): tty, tty \u00b6 A function to retrieve stdin and stdout if you don't already have them","title":"Module `util`"},{"location":"modules/util/#module-util","text":"The utilities module containing some utilities for internal use and others for external use","title":"Module util"},{"location":"modules/util/#functions","text":"","title":"Functions"},{"location":"modules/util/#utilstringiteratorstr-string-stringiterator","text":"An iterator over strings used by event parser","title":"util.StringIterator(str: string): StringIterator"},{"location":"modules/util/#utilsplitstr-string-sep-string-string","text":"A simple split function","title":"util.split(str: string, sep: string): string[]"},{"location":"modules/util/#utilgethandles-tty-tty","text":"A function to retrieve stdin and stdout if you don't already have them","title":"util.getHandles(): tty, tty"},{"location":"structures/keyboardEvent/","text":"Structure keyboardEvent \u00b6 Declaration \u00b6 local keyboardEvent = { key = string , char = string ? } Fields \u00b6 Field Type Description key string The key group that was pressed (F, ctrl, key, etc) char string ? The character associated with the key (the 1 in F1)","title":"Structure `keyboardEvent`"},{"location":"structures/keyboardEvent/#structure-keyboardevent","text":"","title":"Structure keyboardEvent"},{"location":"structures/keyboardEvent/#declaration","text":"local keyboardEvent = { key = string , char = string ? }","title":"Declaration"},{"location":"structures/keyboardEvent/#fields","text":"Field Type Description key string The key group that was pressed (F, ctrl, key, etc) char string ? The character associated with the key (the 1 in F1)","title":"Fields"},{"location":"structures/mouseEvent/","text":"Structure mouseEvent \u00b6 Declaration \u00b6 local mouseEvent = { event = string , x = number ? , y = number ? , button = string ? } Fields \u00b6 Field Type Description event string The event that happened (clicked, held, etc) x number ? The X location of the mouse y number ? The Y location of the mouse button string ? The button that was pressed","title":"Structure `mouseEvent`"},{"location":"structures/mouseEvent/#structure-mouseevent","text":"","title":"Structure mouseEvent"},{"location":"structures/mouseEvent/#declaration","text":"local mouseEvent = { event = string , x = number ? , y = number ? , button = string ? }","title":"Declaration"},{"location":"structures/mouseEvent/#fields","text":"Field Type Description event string The event that happened (clicked, held, etc) x number ? The X location of the mouse y number ? The Y location of the mouse button string ? The button that was pressed","title":"Fields"}]}